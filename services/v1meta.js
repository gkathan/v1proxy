// Generated by CoffeeScript 1.9.1
(function() {
  var AssetClassBase, V1Meta, V1Transaction, asset_dict_filter, client, et, url, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  client = require('./client');

  et = require('elementtree');

  util = require('util');

  url = require('url');

  asset_dict_filter = function(dict) {
    var k, output, v;
    output = {};
    for (k in dict) {
      v = dict[k];
      if ((v != null) && ((v != null ? v.length : void 0) > 0) && (v !== "")) {
        output[k] = v;
      }
    }
    return output;
  };

  AssetClassBase = (function() {
    function AssetClassBase(_v1_id, _v1_transaction) {
      this._v1_id = _v1_id;
      this._v1_transaction = _v1_transaction;
      this._v1_execute_operation = bind(this._v1_execute_operation, this);
      this._v1_new_data = {};
      this._v1_current_data = {};
      return this;
    }

    AssetClassBase.prototype.with_data = function(data) {
      this._v1_current_data = data;
      return this;
    };

    AssetClassBase.prototype.pending = function(data) {
      this._v1_new_data = data;
      return this;
    };

    AssetClassBase.prototype.create_in_context = function(asste_type, data) {
      return pass;
    };

    AssetClassBase.prototype.idref = function() {
      throw "Implement This";
    };

    AssetClassBase.prototype.url = function() {
      var v1meta;
      v1meta = this._v1_v1meta;
      return url.format({
        protocol: v1meta.server.protocol,
        hostname: v1meta.server.hostname,
        port: v1meta.server.port,
        pathname: v1meta.server.instance + '/assetdetail.v1',
        query: {
          oid: this._v1_id
        }
      });
    };

    AssetClassBase.prototype._v1_get = function(attr) {
      var ref;
      return (ref = this._v1_new_data[attr]) != null ? ref : this._v1_current_data[attr];
    };

    AssetClassBase.prototype._v1_set = function(attr, value) {
      if (this._v1_transaction == null) {
        throw "Properties may only be set on assets having a _v1_transaction";
      }
      this._v1_new_data[attr] = value;
      return this._v1_transaction.add_to_dirty(this);
    };

    AssetClassBase.prototype._v1_execute_operation = function(opname, callback) {
      var numid, options, ref, type;
      ref = this._v1_id.split(":"), type = ref[0], numid = ref[1];
      options = {
        asset_type_name: this._v1_asset_type_name,
        opname: opname,
        id: numid
      };
      return this._v1_v1meta.server.execute_operation(options, callback);
    };

    AssetClassBase.prototype.toString = function() {
      var current, newdata, output;
      current = asset_dict_filter(this._v1_current_data);
      newdata = asset_dict_filter(this._v1_new_data);
      output = this._v1_asset_type_name + "('" + this._v1_id + "')";
      if (Object.keys(current).length > 0) {
        output = output + (".with_data(\n" + (util.inspect(current)) + "})");
      }
      if (Object.keys(newdata).length > 0) {
        output = output + ("\n.pending(\n" + (util.inspect(newdata)) + "})");
      }
      return output;
    };

    return AssetClassBase;

  })();

  V1Transaction = (function() {
    function V1Transaction(query_results, v1meta1) {
      this.query_results = query_results != null ? query_results : [];
      this.v1meta = v1meta1;
      this.dirty_assets = [];
    }

    V1Transaction.prototype.add_to_dirty = function(asset) {
      if (indexOf.call(this.dirty_assets, asset) < 0) {
        this.dirty_assets.push(asset);
      }
      return this.v1meta.get_asset_class(asset_type, (function(_this) {
        return function(err, AssetClass) {
          var new_asset;
          new_asset = new AssetClass(void 0, _this);
          new_asset.pending(data);
          return _this.add_to_dirty(new_asset);
        };
      })(this));
    };

    V1Transaction.prototype.iter = function(callback) {
      var asset, i, len, ref, results;
      ref = this.query_results;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        asset = ref[i];
        results.push(callback(asset));
      }
      return results;
    };

    V1Transaction.prototype.commit = function(callback) {
      var dirty_asset, i, len, ref, results;
      ref = this.dirty_assets;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        dirty_asset = ref[i];
        results.push(this.v1meta.update_asset(dirty_asset, (function(_this) {
          return function(err, update_result) {
            return callback(err, dirty_asset, update_result);
          };
        })(this)));
      }
      return results;
    };

    return V1Transaction;

  })();

  module.exports = {
    V1Transaction: V1Transaction,
    V1Meta: V1Meta = (function() {
      function V1Meta(server) {
        this.server = server;
        this.get_asset_class = bind(this.get_asset_class, this);
        this.global_cache = {};
      }

      V1Meta.prototype.for_all_types = function(options) {
        return this.server.get_meta_xml({
          asset_type_name: ''
        }, (function(_this) {
          return function(err, meta_xml) {
            if (err != null) {
              return options.error(err);
            }
            meta_xml.iter('AssetType', function(asset_xml) {
              return options.asset_callback(_this.build_asset_class_from_xml(asset_xml));
            });
            return options.done();
          };
        })(this));
      };

      V1Meta.prototype.build_asset_class_from_xml = function(xml) {
        var asset_type_name, modelClass, v1meta;
        asset_type_name = xml.get('name');
        v1meta = this;
        modelClass = (function(superClass) {
          extend(_Class, superClass);

          function _Class() {
            return _Class.__super__.constructor.apply(this, arguments);
          }

          _Class.prototype._v1_asset_type_name = asset_type_name;

          _Class.prototype._v1_v1meta = v1meta;

          _Class.prototype._v1_ops = [];

          _Class.prototype._v1_attrs = [];

          return _Class;

        })(AssetClassBase);
        xml.iter('Operation', function(operation) {
          var getter, opname;
          opname = operation.get('name');
          modelClass.prototype._v1_ops.push(opname);
          getter = function() {
            return (function(_this) {
              return function(callback) {
                return _this._v1_execute_operation(opname, callback);
              };
            })(this);
          };
          return Object.defineProperty(modelClass.prototype, opname, {
            get: getter,
            enumerable: true
          });
        });
        xml.iter('AttributeDefinition', (function(_this) {
          return function(attribute) {
            var attr, getter, setter;
            attr = attribute.get('name');
            modelClass.prototype._v1_attrs.push(attr);
            if (attribute.get('attributetype') === 'Relation') {
              setter = function(value) {
                return this._v1_set(attr, value);
              };
              getter = function() {
                return this._v1_get(attr);
              };
            }
            if (attribute.get('ismultivalue') !== 'True') {
              setter = function(value) {
                return this._v1_set(attr, value);
              };
              getter = function() {
                return this._v1_get(attr);
              };
            }
            return Object.defineProperty(modelClass.prototype, attr, {
              get: getter,
              set: setter,
              enumerable: true
            });
          };
        })(this));
        return modelClass;
      };

      V1Meta.prototype.build_asset = function(AssetClass, assetxml, trans) {
        var asset, attrname, attrxml, data, i, j, l, len, len1, len2, oidtoken, ref, ref1, ref2, rel, relname, relxml;
        oidtoken = assetxml.get('id');
        asset = new AssetClass(oidtoken, trans);
        data = asset._v1_current_data;
        ref = assetxml.findall('Attribute');
        for (i = 0, len = ref.length; i < len; i++) {
          attrxml = ref[i];
          attrname = attrxml.get('name');
          data[attrname] = attrxml.text;
        }
        ref1 = assetxml.findall('Relation');
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          relxml = ref1[j];
          relname = relxml.get('name');
          if (data[relname] == null) {
            data[relname] = [];
          }
          ref2 = relxml.findall("Asset");
          for (l = 0, len2 = ref2.length; l < len2; l++) {
            rel = ref2[l];
            data[relname].push(rel.get('idref'));
          }
        }
        return asset;
      };

      V1Meta.prototype.query = function(options) {
        if (options.from != null) {
          options.asset_type_name = options.from;
        }
        this.validateOptions(options);
        return this.server.get_query_xml(options, (function(_this) {
          return function(err, xmlresults) {
            var assetxml, found_id, found_type, i, len, oidtoken, ref, ref1, results;
            if (err != null) {
              return options.error(err);
            }
            ref = xmlresults.findall('.Asset');
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              assetxml = ref[i];
              oidtoken = assetxml.get('id');
              ref1 = oidtoken.split(':'), found_type = ref1[0], found_id = ref1[1];
              results.push(_this.get_asset_class(found_type, function(err, Cls) {
                var asset;
                if (err != null) {
                  return options.error(err);
                }
                asset = _this.build_asset(Cls, assetxml);
                return options.success(asset);
              }));
            }
            return results;
          };
        })(this));
      };

      V1Meta.prototype.trans_query = function(options) {
        if (options.from != null) {
          options.asset_type_name = options.from;
        }
        this.validateOptions(options);
        return this.get_asset_class(options.asset_type_name, (function(_this) {
          return function(err, Cls) {
            if (err != null) {
              return options.error(err);
            }
            return _this.server.get_query_xml(options, function(err, xmlresults) {
              var asset, assets, trans;
              if (err != null) {
                return options.error(err);
              }
              trans = new V1Transaction([], _this);
              assets = (function() {
                var i, len, ref, results;
                ref = xmlresults.findall('.Asset');
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  asset = ref[i];
                  results.push(this.build_asset(Cls, asset, trans));
                }
                return results;
              }).call(_this);
              trans.query_results = assets;
              return options.success(trans);
            });
          };
        })(this));
      };

      V1Meta.prototype.get_asset_class = function(asset_type_name, callback) {
        if (asset_type_name in this.global_cache) {
          return callback(void 0, this.global_cache[asset_type_name]);
        } else {
          return this.server.get_meta_xml({
            asset_type_name: asset_type_name
          }, (function(_this) {
            return function(error, xml) {
              var cls;
              if (error != null) {
                return callback(error);
              }
              cls = _this.build_asset_class_from_xml(xml);
              _this.global_cache[asset_type_name] = cls;
              return callback(void 0, cls);
            };
          })(this));
        }
      };

      V1Meta.prototype.validateOptions = function(options) {
        if (options.success == null) {
          throw "Must pass a 'success' function callback which gets called if data retrieval succeeds";
        }
        if (options.error == null) {
          throw "Must pass an 'error' function callback which gets called if data retrieval fails";
        }
      };

      V1Meta.prototype.generate_update_doc = function(newdata) {
        var attrname, fn, newvalue, update_doc;
        update_doc = new et.Element('Asset');
        fn = (function(_this) {
          return function(attrname) {
            return (function(newvalue) {
              var child, i, item, len, node, ra;
              if (newvalue._v1_asset_type_name != null) {
                node = new et.Element('Relation');
                node.set('name', attrname);
                node.set('act', 'set');
                ra = new et.Element('Asset');
                ra.set('idref', newvalue.idref());
                node.append(ra);
              } else if (newvalue instanceof Array) {
                node = new et.Element('Relation');
                node.set('name', attrname);
                for (i = 0, len = newvalue.length; i < len; i++) {
                  item = newvalue[i];
                  child = new et.Element('Asset');
                  child.set('idref', item.idref());
                  child.set('act', 'set');
                  node.append(child);
                }
              } else {
                node = new et.Element('Attribute');
                node.set('name', attrname);
                node.set('act', 'set');
                node.text = newvalue.toString();
              }
              return update_doc.append(node);
            })(newvalue);
          };
        })(this);
        for (attrname in newdata) {
          newvalue = newdata[attrname];
          fn(attrname);
        }
        return update_doc;
      };

      V1Meta.prototype.create = function(asset_type, data, callback) {
        var create_opts, update_doc;
        update_doc = this.generate_update_doc(data);
        create_opts = {
          asset_type_name: asset_type,
          xmldata: update_doc
        };
        return this.server.create_asset(create_opts, (function(_this) {
          return function(err, result) {
            var created_id, created_moment, created_type, ref;
            if (err != null) {
              return callback(err);
            }
            ref = result.get('id').split(":"), created_type = ref[0], created_id = ref[1], created_moment = ref[2];
            return _this.query({
              from: created_type,
              where: {
                ID: created_type + ":" + created_id
              },
              select: ['Number', 'Name'],
              error: function(err) {
                return callback(err);
              },
              success: function(result) {
                console.log(result);
                return callback(void 0, result);
              }
            });
          };
        })(this));
      };

      return V1Meta;

    })()
  };

}).call(this);
